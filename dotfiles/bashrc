#!/usr/bin/env bash

set -o pipefail

main() {
  printf '\x1b[1m… .bashrc\x1b[0m\n'

  configure_bash
  configure_kitty

printf '\x1b[1;32m✔ .bashrc\x1b[0m\n'
}

configure_bash() {
  configure_env
  configure_aliases
  configure_functions
  configure_keys
}

configure_env() {
  [[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh"
  source ~/.vendor/bash/colours.bash
  source ~/.vendor/bash/git-completion.bash
  source "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.bash.inc"
  source "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.bash.inc"
  source "$HOME/.sdkman/bin/sdkman-init.sh"

  export LANG=en_US.UTF-8
  export EDITOR=nvim
  export LESS=-Ri

  export XDG_CONFIG_HOME=~/.config

  # Do not immediately quit the shell on C-d, but only after the third time.
  export IGNOREEOF=2

  # Include my personal scripts in PATH.
  PATH="/usr/local/bin:$PATH"
  PATH="$(pyenv root)/shims:$PATH"
  PATH="$HOME/go/bin:$PATH"
  PATH="$HOME/workspace/osx-home/bin:$PATH"
  PATH="$HOME/bin:$PATH"
  PATH="${PATH}:${HOME}/.krew/bin"
  export PATH

  # Set TERM='xterm-256color' to get proper color support in Vim and other
  # applications.
  export TERM='xterm-256color'

  # This erases duplicates in the command history, keeps 10k entris, and
  # appends to the history file rather than overwriting it.
  export HISTCONTROL=ignoredups:erasedups
  export HISTSIZE=10000
  export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"
  # Does not work as expected
  # https://unix.stackexchange.com/questions/109032/how-to-get-a-history-entry-to-properly-display-on-multiple-lines
  export HISTTIMEFORMAT='%F %T '
  shopt -s histappend
  shopt -s cmdhist
  shopt -s lithist

  export LSCOLORS="GxFxCxDxBxEgEdabagacad"
  export GREP_OPTIONS="--color"

  # Hide the Bash deprecation warning on newer versions of macOS.
  # See: https://support.apple.com/en-gb/HT208050
  export BASH_SILENCE_DEPRECATION_WARNING=1

  # Make GPG happy
  export GPG_TTY=$(tty)

  export GO111MODULE=on
  export GIT_DUET_ROTATE_AUTHOR=1

  # Fuzzyfinder fzf
  [ -f ~/.fzf.bash ] && source ~/.fzf.bash
  export FZF_DEFAULT_COMMAND='fd --no-ignore --type f --type d --hidden --follow --exclude=.git --exclude=.idea --exclude=.vscode --exclude=.sass-cache --exclude=node_modules --exclude=build --exclude=Library'
  # Use ~~ as the trigger sequence instead of the default **
  export FZF_COMPLETION_TRIGGER='~~'
  # Options to fzf command
  export FZF_COMPLETION_OPTS="--border --info=inline --preview 'bat --style=numbers --color=always --line-range :500 {}'"

  eval "$(direnv hook bash)"
  eval "$(zoxide init bash)"
  eval "$(starship init bash)"

  export NVM_DIR="$HOME/.nvm"

  source ~/tools.sh
}

configure_aliases() {
  unalias -a

  source ~/complete_alias

  alias s='source ~/.bash_profile'

  alias vim=nvim

  alias y='yq e . -'

  alias make=gmake

  alias ls='exa -la --icons'
  alias ll='ls'

  alias watch='watch -c '

  alias cat=bat

  alias tree="echo 'Ignoring .git and .idea' >&2 && tree -C --noreport -a -I '.idea|.git' "
  alias l="tree -F"
  alias lll="l --du -s -h"

  alias r='cd $(git rev-parse --show-toplevel)'

  # Kubernetes
  alias k=kubectl
  alias kg="kubectl get --output=yaml"
  alias kt="kubectl tree"
  alias kl="kubectl lineage"
  alias kdebug='kubectl run debug-shell --rm --timeout 0 -i --tty --image nicolaka/netshoot -- /bin/bash'
  alias kdebuglite='kubectl run debug-shell --rm --timeout 0 -i --tty --image alpine -- /bin/sh'
  alias kexec='kubectl run debug-shell --restart Never --rm --timeout 0 -i --tty --image nicolaka/netshoot -- '
  alias kexeclite='kubectl run debug-shell --restart Never --rm --timeout 0 -i --tty --image alpine -- '
  alias kwatch="k9s --headless --all-namespaces --command pods --logoless"
  alias kw=kwatch
  alias k9="k9s --headless --all-namespaces --logoless --context kind-kind --command "
  export do='--dry-run=client --output=yaml'
  export die='--grace-period=0 --force'
  complete -F _complete_alias k
  complete -F _complete_alias kg

  # Gcloud
  alias g=gcloud

  # Docker
  alias dockerclean="docker system prune --force --all --volumes && docker network prune --force"

  alias p='k get packagerepositories,packages,packageinstalls -A'

  alias tz='TZ_LIST="UTC,Zulu;America/Los_Angeles,Irina & Filip;America/Chicago,Candice;America/New_York,Sarah & Dmitriy;CET,Daniel & Max" tz'

  alias drun='docker run --rm -it --volume $PWD:/src --workdir /src '

  alias mx='tmuxinator'
  alias mxs='mx start'
  alias mxe='mx edit'
  alias sso='mxs appsso'
  alias ci_app='mxs ci-app'
  alias docs='mxs docs'

  alias select_tmux_session='tmux list-sessions -F \#S | gum filter --placeholder "Pick session..."'
  alias switch_tmux='tmux switch-client -t $(select_tmux_session) || tmux attach -t $(select_tmux_session)'
  alias smux=switch_tmux
}

configure_keys() {
  # Configure up/down arrow keys to search through history.
  bind '"\e[A": history-search-backward'
  bind '"\e[B": history-search-forward'
  bind '"\eOA": history-search-backward'
  bind '"\eOB": history-search-forward'
}

# Functions
v() {
  local file
  file=$(fzf)
  nvim "$file"
}

vag() {
  local files searchPattern fileSearchPattern

  searchPattern="${1?}"
  fileSearchPattern="${2:-'.*'}"

  vim $(ag --files-with-matches "$searchPattern" --file-search-regex "$fileSearchPattern")
}

saferbash() {
  local filename
  filename="${1:?}"
  cat <<EOF > "$filename"
#!/usr/bin/env bash

set -euo pipefail

cd "\$(dirname "\$0")"

EOF
  chmod +x "$filename"
  vim "$filename"
}

kmonitor() {
  printf '\x1b[34mContext: \x1b[1m%s\x1b[0m\n' "$(kubectx --current)"
  printf '\x1b[34mNamespace: \x1b[1m%s\x1b[0m\n' "$(kubens --current)"
  echo
  kubectl get ns,all,secrets,sa,ingress
}

__expand() {
  return 0
}

nvm_configure() {
  [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
  [ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"
}

configure_functions() {
  export -f kmonitor
  export -f v
  export -f vag
  export -f __expand
  export -f nvm_configure
}

configure_kitty() {
  source /dev/stdin <<<"$(kitty + complete setup bash)"
}

main

